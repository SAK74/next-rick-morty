// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Favorite {
  id   Int    @id
  User User[]

  @@map("favorites")
}

enum HeroStatus {
  Alive
  Dead
  unknown
}

enum Gender {
  Female
  Male
  Genderless
  unknown
}

model Custom {
  id        String     @id @default(uuid())
  name      String
  status    HeroStatus @default(unknown)
  gender    Gender     @default(unknown)
  image     String
  species   String
  created   DateTime   @updatedAt
  User      User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
}

model User {
  email         String     @unique
  password      String?
  name          String?
  favorites     Favorite[]
  customs       Custom[]
  id            String     @id @default(cuid())
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  // sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
